name: FRONTEND-CI

# Controls when the action will run. 
on:

  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

env:
  REGISTRY_HOSTNAME: ${{ secrets.REGISTRY_HOSTNAME }}
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  K8S_CONFIG: ${{ secrets.K8S_CONFIG }}
  DEPLOYMENT_NAME: hello-python
  PORT: 5001

jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    env:
      working-directory: ./journal/frontend
      docker_repo: ${{ secrets.DOCKER_USER }}/${{ secrets.IMAGE_NAME }}
    steps:
      - name: scm
        uses: actions/checkout@v2
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1
      # - name: Login to DockerHub
      #   uses: docker/login-action@v1 
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     push: true
      #     tags: $DOCKER_USER/$IMAGE_NAME:$GITHUB_SHA

      # - name: docker login
      #   run: |
      #     docker login docker.io -u DOCKER_USER -p DOCKER_TOKEN

      # - name: Build with Docker
      #   run: |
      #     docker build -t $REGISTRY_HOSTNAME/$DOCKER_USER/$IMAGE_NAME:$GITHUB_SHA .
      #   working-directory: ${{ env.working-directory }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.docker_repo }}
          context: ${{ env.working-directory }}
          tag_with_ref: true

      # # Push the image to IBM Container Registry
      # - name: Push the image to ICR
      #   uses: docker/build-push-action@v1
      #   run: |
      #     docker push $REGISTRY_HOSTNAME/$DOCKER_USER/$IMAGE_NAME:$GITHUB_SHA
  # deploy:
  # # Deploy the Docker image to the IKS cluster
  #     - name: Deploy to IKS
  #       run: |
  #         kubectl config current-context
  #         kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
  #         kubectl apply -f deployment.yaml
  #         kubectl rollout status deployment/$DEPLOYMENT_NAME
  #         kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
  #         kubectl apply -f service.yaml
  #         kubectl get services -o wide
